param(
    [switch] $initialize, 
    [switch] $reap
    )
    

# Verbose by default
$PSDefaultParameterValues['New-Item:Verbose'] = $true

Write-Verbose ""
Get-Date -Format g
Write-Verbose "Starting Autoscale Run"

Add-PsSnapin Microsoft.HPC
$verbosePreference = "continue"
$sql_serv = "<%= node['hostname'] %>\COMPUTECLUSTER"
$sql_db = "HPCPackAutoscale"
$sql_tbl = "NodeState"
$default_job_timespan = New-Timespan -Hours <%= @timespan_hr %> -Minutes <%= @timespan_min %> -Seconds <%= @timespan_sec %>
$add_node_threshold = New-Timespan -Hours <%= @threshold_hr %> -Minutes <%= @threshold_min %> -Seconds <%= @threshold_sec %>

$min_node_count = <%= @min_node_count %>

$autostopDeallocate = $true
if ("<%= @node[:hpcpack][:autoscale][:deallocate] %>" -eq "false") {
    $autostopDeallocate = $false
}

# TODO: Remove and autoscale by node as well as core
$estimated_cores_per_node = 8

$start_url = "<%= @node[:cyclecloud][:config][:web_server] %>/clusters/<%= @node[:cyclecloud][:cluster][:name] %>/nodes/start"
$stop_url = "<%= @node[:cyclecloud][:config][:web_server] %>/clusters/<%= @node[:cyclecloud][:cluster][:name] %>/nodes/deallocate"
$list_nodes_url = "<%= @node[:cyclecloud][:config][:web_server] %>/cloud/api/nodes"
$autoscale_url = "<%= @node[:cyclecloud][:cluster][:autoscale][:stop_callback] %>"
$autoscale_user = "<%= @node[:cyclecloud][:config][:username] %>"
$autoscale_pw = "<%= @node[:cyclecloud][:config][:password] %>"

# Allow self-signed certificatest for CycleCloud
Add-Type @"
    using System;
    using System.Net;
    using System.Net.Security;
    using System.Security.Cryptography.X509Certificates;
    public class ServerCertificateValidationCallback
    {
        public static void Ignore()
        {
            ServicePointManager.ServerCertificateValidationCallback += 
                delegate
                (
                    Object obj, 
                    X509Certificate certificate, 
                    X509Chain chain, 
                    SslPolicyErrors errors
                )
                {
                    return true;
                };
        }
    }
"@

[System.Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::tls12
[ServerCertificateValidationCallback]::Ignore();


function testVariable() {
    $sql_db
}

function initializeDb() {

    $createquery = "
    CREATE DATABASE $sql_db;
    GO
    USE $sql_db;
    
    CREATE TABLE $sql_tbl (
        NodeName varchar(255) NOT NULL,
        NodeState varchar(255),
        NodeHealth varchar(255),
        HealthState varchar(255),
        Template varchar(255),
        InstanceId varchar(255),
        FirstSeen datetime,
        LastKnownActive datetime,
        IsActive bit,
        EverActive bit,
        DesignatedToRemove bit,
        Persistent bit,
        NodeArray varchar(255) ,
        PRIMARY KEY (NodeName)
    );
    GO"
    Invoke-SQLcmd -ServerInstance $sql_serv -query $createquery 
}

function updateNewNodes() {
    $nodes = Get-HpcNode | Where-Object {!($_.IsHeadNode)}
    $db_hpcnodes = Invoke-sqlcmd -ServerInstance $sql_serv -Database $sql_db `
        -Query "SELECT NodeName FROM $sql_tbl"

    $new_nodes = $nodes | ?{$db_hpcnodes.nodename -notcontains $_.NetBiosName}
    $updated_nodes = $nodes | ?{$db_hpcnodes.nodename -contains $_.NetBiosName -and ($db_hpcnodes.nodestate -ne $_.NodeState -or $db_hpcnodes.healthstate -ne $_.HealthState -or $db_hpcnodes.nodehealth -ne $_.NodeHealth -or $db_hpcnodes.template -ne $_.Template)}
    Write-Verbose "New nodes found $($new_nodes)"
    $departed_hosts = $db_hpcnodes.nodename | ?{$nodes.NetBiosName -notcontains $_}

    $insertquery="
    USE $sql_db;
    "
    foreach($updated_node in $updated_nodes) 
        {
        $nodename = $updated_node.NetBiosName
        
        # Location being used for instance id
        $words = $updated_node.Location -split '\',-1,'SimpleMatch'
        $instance_id = $words[-1]
        if (!$instance_id) {
            Write-Verbose "No instance ID found for new host $nodename "
            $instance_id = "no_instance_id"
        }

        $nodestate = $updated_node.NodeState
        $nodehealth = $updated_node.NodeHealth
        $healthstate = $updated_node.HealthState
        $template = $updated_node.Template

        Write-Verbose "Updating host $($nodename) - $($instance_id) : [ $nodestate / $healthstate / $template ]"
        $insertquery += "
        UPDATE NodeState
            SET NodeState = '$nodestate', NodeHealth = '$nodehealth', HealthState = '$healthstate', Template = '$template', InstanceId = '$instance_id'
            WHERE NodeName = '$nodename';
        "
        }
    foreach($new_node in $new_nodes) 
        {
        $nodename = $new_node.NetBiosName
        
        # Location being used for instance id
        $words = $new_node.Location -split '\',-1,'SimpleMatch'
        $instance_id = $words[-1]
        if (!$instance_id) {
            Write-Verbose "No instance ID found for new host $nodename "
            $instance_id = "no_instance_id"
        }

        $nodestate = $new_node.NodeState
        $nodehealth = $new_node.NodeHealth        
        $healthstate = $new_node.HealthState
        $template = $new_node.Template
        Write-Verbose "Adding new host $($nodename) - $($instance_id)"
        $insertquery +=  "
        INSERT INTO NodeState 
                (NodeName
                ,NodeState
                ,NodeHealth
                ,HealthState
                ,Template
                ,InstanceId
                ,FirstSeen
                ,EverActive
                ,DesignatedToRemove
                ,Persistent)
            VALUES 
                ('$nodename'
                ,'$nodestate'
                ,'$nodehealth'
                ,'$healthstate'
                ,'$template'
                ,'$instance_id'
                ,GETDATE()
                ,0
                ,0
                ,0);
        " 
        }
    $insertquery += "
    GO"
    #echo $insertquery
    Invoke-SQLcmd -ServerInstance $sql_serv -query $insertquery -Database $sql_db
}


function lastAllocatedTimes() {
    $allocations = @{}
    $jobs = Get-HpcJob -State All | Where-Object { $_.allocatednodes } | Where-Object { ( $_.endtime -eq $null ) -or ( $_.endtime -gt (Get-Date).AddHours(-2)) }
    foreach( $j in $jobs ) {
        $endtime = if ($j.endtime) { $j.endtime } else { date }
        if ( $j.allocatednodes ) {
            foreach($a in $j.allocatednodes.split(',')) {
                if ( ($allocations[$a] -eq $null ) -or ( $allocations[$a] -lt $endtime )) {
                    $allocations[$a] = $endtime
                }
            }  
        }
    }
    $allocations
}

# TODO: Should we use this more aggressive removal of Error State nodes? 
function markUnhealthy() {
    # Quickly remove Error state nodes
    $updatequery = "
    UPDATE NodeState
    SET DesignatedToRemove = 1, Persistent = 0
    WHERE (NodeState = 'Online') AND (NodeHealth = 'Unreachable');
    "

    #echo $updatequery
    Invoke-SQLcmd -ServerInstance $sql_serv -query $updatequery -Database $sql_db
}

function markIdleForcibly($nodename) {
    Write-Host "WARNING: Forcibly retiring node : $nodename"
    $updatequery = "
    UPDATE NodeState
    SET DesignatedToRemove = 1, Persistent = 0
    WHERE NodeName = '$nodename';
    "
    #echo $updatequery
    Invoke-SQLcmd -ServerInstance $sql_serv -query $updatequery -Database $sql_db
}

function markIdleUnused() {
    Write-Host "WARNING: Forcibly retiring unused nodes"
    $updatequery = "
    UPDATE NodeState
    SET DesignatedToRemove = 1, Persistent = 0
    WHERE EverActive = 0;
    "
    #echo $updatequery
    Invoke-SQLcmd -ServerInstance $sql_serv -query $updatequery -Database $sql_db
}

function markIdleAfterJobs() {
    # Do not remove Persistent nodes just because they are idle
    $updatequery = "
    UPDATE NodeState
    SET DesignatedToRemove = 1
    WHERE LastKnownActive < dateadd(second,-<%= @wait_after_jobs_s %>,getdate()) AND EverActive=1 AND (Persistent = 0 or Persistent is null or (HealthState != 'OK'));
    "
    #echo $updatequery
    Invoke-SQLcmd -ServerInstance $sql_serv -query $updatequery -Database $sql_db
}

function markIdleBeforeJobs() {
    # Do not remove Persistent nodes just because they are idle
    $updatequery = "
    UPDATE NodeState
    SET DesignatedToRemove = 1
    WHERE FirstSeen < dateadd(second,-<%= @wait_before_jobs_s %>,getdate()) AND EverActive=0 AND (Persistent = 0 or Persistent is null or (HealthState != 'OK'));
    "
    #echo $updatequery
    Invoke-SQLcmd -ServerInstance $sql_serv -query $updatequery -Database $sql_db
}

function markPersistentNodes() {
    $persistent_nodes = Invoke-sqlcmd -ServerInstance $sql_serv -Database $sql_db `
      -Query "SELECT NodeName FROM $sql_tbl WHERE Persistent = 1;"
    if ($persistent_nodes.Length -lt $min_node_count) {
        $needed_persistent_nodes = $min_node_count - $persistent_nodes.Length
        Write-Verbose "Marking $needed_persistent_nodes nodes of min $min_node_count as Persistent."
        $updatequery = "
        UPDATE TOP($needed_persistent_nodes) NodeState 
        SET Persistent = 1
        WHERE DesignatedToRemove = 0 AND (Persistent = 0 or Persistent is null);
        "
        #echo $updatequery
        Invoke-SQLcmd -ServerInstance $sql_serv -query $updatequery -Database $sql_db
    }
    
}

function updateNodes() {
    markPersistentNodes

    # $mets = Get-HpcMetricValue -Name HPCCoresInUse
    # $active_nodes = $mets | Where-Object {$_.Value -gt 0}
    # $inactive_nodes = $mets | Where-Object {$_.Value -eq 0}


    $db_hpcnodes = Invoke-sqlcmd -ServerInstance $sql_serv -Database $sql_db `
                    -Query "SELECT NodeName FROM $sql_tbl"


    $active_nodes = lastAllocatedTimes
    foreach($node in $active_nodes.GetEnumerator()) {
        $node_name = $node.Key
        $last_active = $node.Value
        if ($db_hpcnodes.nodename -notcontains $node_name) {
            # LastAllocatedTimes includes nodes that have already been removed
            continue
        }
        
        $is_active = if ( $last_active -gt (Get-Date).AddSeconds(-60) ) { 1 } else { 0 }
        $wait_before_jobs_expired = if ($last_active -lt (Get-Date).AddSeconds(-<%= @wait_before_jobs_s %>)) { 1 } else { 0 }
        $wait_after_jobs_expired = if ($last_active -lt (Get-Date).AddSeconds(-<%= @wait_after_jobs_s %>)) { 1 } else { 0 }
        $cond = "( '" + $node_name.trim() + "' )"
        $updatequery = "
        USE $sql_db;
        UPDATE NodeState 
        SET LastKnownActive = '$last_active', EverActive = 1 , IsActive = $is_active, DesignatedToRemove = 0
        WHERE NodeName IN $cond;
        GO
        "
        echo $updatequery
        Invoke-SQLcmd -ServerInstance $sql_serv -query $updatequery -Database $sql_db
    }
    
    # Update Idle nodes 
    markIdleBeforeJobs
    markIdleAfterJobs
    markUnhealthy

}


function assignNodeTemplateToNewNodes() {
    # TODO: Assign a different node template for each slot_type.

    $unapproved_nodes = Invoke-sqlcmd -ServerInstance $sql_serv -Database $sql_db `
        -Query "SELECT NodeName FROM $sql_tbl WHERE NodeHealth = 'OK' and HealthState = 'Unapproved';"

    # $num_parallel = 0
    # $MAX_PARALLEL = '10'
    # foreach($node in $unapproved_nodes) {
    #     # Assign template is slow, so run multiple in parallel
    #     Write-Verbose "Assigning template $templateName to node $($node.NodeName)"
    #     $assignTemplateBlock = {
    #         param($node)
    #         $templateName = "Default ComputeNode Template"
    #         Add-PsSnapin Microsoft.HPC 
    #         Assign-HpcNodeTemplate -NodeName $node.NodeName -Name $templateName -Confirm:$false
    #     }

    #     Start-Job $assignTemplateBlock -ArgumentList $node, $templateName

    #     # Batch the requests to avoid overloading the manager
    #     $num_parallel += 1
    #     if($num_parallel -gt $MAX_PARALLEL){
    #         Get-Job | Wait-Job | Receive-Job
    #         $num_parallel = 0
    #     }
    # }

    if($null -eq $unapproved_nodes)
    {
        return
    }
    $maxNodesInOneChange = 40
    $unapproved_nodenames = @($unapproved_nodes.NodeName)
    $nbrnodes_toassign = $unapproved_nodenames.Count
    while($nbrnodes_toassign -gt 0)
    {
        Start-Job -ScriptBlock {
            param($templateName, $nodenames)
            Add-PsSnapin Microsoft.HPC
            Assign-HpcNodeTemplate -NodeName $nodenames -Name $templateName -Confirm:$false
        } -ArgumentList @("Default ComputeNode Template", @($unapproved_nodenames | select -First $maxNodesInOneChange))
 
        $nbrnodes_toassign -= $maxNodesInOneChange
        if($nbrnodes_toassign -gt 0)
        {
            $unapproved_nodenames = @($unapproved_nodenames | select -Last $nbrnodes_toassign)
        }
    }
     

    # Wait for completion and get output
    Get-Job | Wait-Job | Receive-Job
}


function targetCoreCount() {
    try { $jobs = Get-HpcJob -State Configuring,Submitted,Queued,Running } 
    catch { return 0 }

    $target_batch_cores = targetBatchCoreCount($jobs)
    $target_soa_cores = targetSOACoreCount($jobs)
    Write-Verbose "Target cores [ Batch : $target_batch_cores , SOA : $target_soa_cores ]"
    $target_cpus =  $target_batch_cores + $target_soa_cores
    return $target_cpus
}

function targetSOACoreCount($jobs) {
    Write-Verbose "TODO : SOA Job scaling does not currently reduce core count while the job is running..."
    
    $total_cpu_time = New-TimeSpan
    $total_core_request = 0
    foreach($job in $jobs){
        if (($job.State -ne "Running") -and ($job.State -ne "Queued")) {
            continue
        }
        $outstanding_calls = $job.OutstandingCalls
        if ($outstanding_calls -eq 0) {
            # Batch Job
            continue
        }  
        $mincores = $job.MinCores
        $job_core_request = [math]::max( $mincores , $outstanding_calls )

        if ($job.Exclusive) {
            # HACK : until we have autoscale by node
            $job_core_request = $job_core_request * $estimated_cores_per_node
        }
        
        Write-Verbose "SOA Job $($job.id) (exclusive: $($job.Exclusive)) has $outstanding_calls requires $job_core_request"

        $total_core_request = $total_core_request + $job_core_request
    }
    
    return $total_core_request
}

    
function targetBatchCoreCount($jobs) {
    $total_cpu_time = New-TimeSpan
    $total_core_request = 0
    foreach($job in $jobs){
        if (($job.State -ne "Running") -and ($job.State -ne "Queued")) {
            continue
        }

        $outstanding_calls = $job.OutstandingCalls
        if ($outstanding_calls -ne 0) {
            # SOA Job
            continue
        }  

        
        $mincores = $job.MinCores
#        $ntasks = $job.NumberOfTasks
        $ntasks = $job.ConfiguringTasksCount + $job.QueuedTasksCount + $job.RunningTasksCount 
        $total_core_request = $total_core_request + ($mincores * $ntasks)
        $runtime = $default_job_timespan
        if ($job.RunTime) {
            $runtime = $job.RunTime            
        }
        $remain_run_time = $runtime.Subtract($job.ElapsedTime)
        Write-Verbose "remain_run_time = $remain_run_time"
        if ($mincores -gt 1) {
            $remain_run_time = [TimeSpan] ($remain_run_time.Ticks * [math]::Max($mincores, $ntasks))
        }


        $tasks = Get-HpcTask -JobId $job.id
        $total_task_mincores = 0
        $total_task_remain_run_time = New-TimeSpan
        foreach($task in $tasks){
            $task_mincores = 1            
            if ($task.mincores -ne $null) {
                $task_mincores = $task.MinCores
            }
            if ($task.Exclusive) {
                # HACK : until we have autoscale by node
                $task_mincores = $task_mincores * $estimated_cores_per_node
            }
        
            
            $total_task_core_request = $total_task_core_request + $task_mincores
            $task_run_time = $default_job_timespan
            if ($task.RunTime -ne $null){
                $task_run_time = $task.RunTime
            }
            $remain_task_run_time = $task_run_time.Subtract($task.ElapsedTime)
            if ($task_mincores -gt 1) {
                $remain_task_run_time = [TimeSpan] ($remain_task_run_time.Ticks * $task_mincores)
            }
            $total_task_remain_run_time = $total_task_remain_run_time.Add($remain_task_run_time)
        }

        
        $remain_job_run_time = $remain_run_time
        if ($remain_run_time -lt $total_task_remain_run_time){
            $remain_job_run_time = $total_task_remain_run_time
        }
        $total_cpu_time = $total_cpu_time.Add($remain_job_run_time)
    }
    Write-Verbose "total_cpu_time / add_node_threshold = $($total_cpu_time.Ticks) / $($add_node_threshold.Ticks)"
    Write-Verbose "$total_cpu_time"
    $target_cpus = [math]::floor($total_cpu_time.Ticks / $add_node_threshold.Ticks)
    return [math]::min( $target_cpus , $total_core_request )
}

function currentComputeCapacity() {
    try { 
        $sum_cores = Get-HPCNode -GroupName ComputeNodes -ErrorAction SilentlyContinue | Measure-Object -Property ProcessorCores -Sum
        if ($sum_cores -eq $null) { 
            return 0 
        } else { 
            return $sum_cores.Sum
        }
    } catch { 
        return 0 
    }   
}

function currentOnlineComputeCapacity() {
    try { 
        $sum_cores = Get-HPCNode -GroupName ComputeNodes -State Online  -ErrorAction SilentlyContinue | Measure-Object -Property ProcessorCores -Sum
        if ($sum_cores -eq $null) { 
            return 0 
        } else { 
            return $sum_cores.Sum
        }
    } catch { 
        return 0 
    }   
}


function listDesignatedToRemove() {
    Invoke-sqlcmd -ServerInstance $sql_serv -Database $sql_db `
    -Query "SELECT NodeName FROM $sql_tbl WHERE DesignatedToRemove = 1;"
}

function listActive() {
    Invoke-sqlcmd -ServerInstance $sql_serv -Database $sql_db `
    -Query "SELECT NodeName FROM $sql_tbl WHERE IsActive = 1;"
}

function listInactive() {
    Invoke-sqlcmd -ServerInstance $sql_serv -Database $sql_db `
    -Query "SELECT NodeName, LastKnownActive, EverActive FROM $sql_tbl WHERE IsActive != 1 ORDER BY LastKnownActive;"
}


function berserker() {
    echo "no-op; would remove idle nodes."
    $remove_nodes = Invoke-sqlcmd -ServerInstance $sql_serv -Database $sql_db `
    -Query "SELECT NodeName FROM $sql_tbl WHERE DesignatedToRemove = 1;"

    $demand=targetCoreCount

    foreach($remove_node in $remove_nodes){
        echo "Removing $($remove_node.NodeName)"
        
        $state = Get-HpcNode -Name $remove_node.NodeName
        if ( -not $state ) {

            Write-Verbose "Terminating unknown node: $($remove_node.NodeName)"
            terminateNode($remove_node.NodeName)
            continue

        }
        else {
            Write-Verbose $($state | select NetBiosName, NodeState, NodeHealth, HealthState)
        }

        $online_cores = currentOnlineComputeCapacity
        Write-Verbose "Current: $online_cores  Target: $demand"
        if ($online_cores -ge $demand + $remove_node.ProcessorCores) {
            if ($state.NodeState -eq "Online") {
                Write-Verbose "Set node offline $($remove_node.NodeName) [cores: $($state.ProcessorCores), online cores: $online_cores, min cores: $min_core_count]"
                Set-HpcNodeState -Name $remove_node.NodeName -State "offline" -Async
                continue
            }
        }

        if ($state.NodeState -in "Offline", "Unknown", "Provisioning" ) {
            Write-Verbose "Terminating node: $($remove_node.NodeName) in state: $($state.NodeState) [cores: $($state.ProcessorCores), online cores: $online_cores, min cores: $min_core_count]"
            terminateNode($remove_node.NodeName)
        }
    }
    
}

function terminateNode($nodeName){
    $removeId = Invoke-sqlcmd -ServerInstance $sql_serv -Database $sql_db `
    -Query "SELECT InstanceId FROM $sql_tbl WHERE NodeName = '$nodeName';"
    
    $Time=Get-Date
    try {
        if ($autostopDeallocate -eq $true) {
            Write-Verbose "$time Deallocating instance node $nodeName :  $($removeId.InstanceId)"
            stopDeallocateInstance( $removeId.InstanceId) 
        } else {
            Write-Verbose "$time Terminating instance node $nodeName :  $($removeId.InstanceId)"
            terminateInstance( $removeId.InstanceId) 
        }
    } catch { 
        Write-Host "Failed to remove node $nodeName"
        Write-Host  $_.Exception.Message
        if ( $_.Exception.Response.StatusCode.value__ -eq 409 -or $_.Exception.Response.StatusCode.value__ -eq 404 ) {
           Write-Host "409 or 404 indicates that Cloud.Node did not match instance ID: $($removeId.InstanceId).   Removing HPC Pack node."
        } else {
           return
        }
    }
    

    Write-Verbose "Removing node $nodeName"
    Remove-HPCNode -Name $nodeName

    Write-Verbose "Removing node $nodeName from DB"
    $pop =  Invoke-sqlcmd -ServerInstance $sql_serv -Database $sql_db `
    -Query "DELETE FROM $sql_tbl WHERE NodeName = '$nodeName';"
}


function listActiveInstances($attributes=@("InstanceID", "CoreCount"), $array_name='execute') {
    return listInstances '!(TargetState in { "Deallocated", "Stopped", "Off", "Terminated" })' $attributes $array_name
}

function listDeallocatedInstances($attributes=@("InstanceID", "CoreCount"), $array_name='execute') {
    return listInstances 'State=="Deallocated"' $attributes $array_name
}

function listInstances($filter, $attributes=@("InstanceID", "CoreCount"), $array_name='execute') {
    # List the Instance IDs of matching nodes
    if ([string]::IsNullOrWhiteSpace($filter)) {
        $filter = [uri]::EscapeDataString('InstanceId isnt undefined && Template == ' + $array_name + '"')    
    } else {
        $filter = [uri]::EscapeDataString('InstanceId isnt undefined && Template == "' + $array_name + '" && ' + $filter)
    }

    $attribute_format = ""
    foreach ($attr in $attributes) {
      if ([string]::IsNullOrWhiteSpace($attribute_format)) {
          $attribute_format += "%(" + $attr + ")s"
      } else {
          $attribute_format += ", %(" + $attr + ")s"
      }            
    }
    $attribute_format = '"' + $attribute_format + '"'
    $attribute_format = [uri]::EscapeDataString($attribute_format)
    $cc_url = $list_nodes_url + "?cluster=<%= @node[:cyclecloud][:cluster][:name] %>&output=" + $attribute_format + "&filter=" + $filter
    $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $autoscale_user,$autoscale_pw)))
    $response = Invoke-RestMethod -Uri $cc_url -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)} -Method 'Get'
    $instances = $response | Foreach-Object {$_ -replace '"', ""}
    $instances = $instances -split "`r`n|`r|`n"
    return $instances
}


function terminateInstance($instanceID) {
    $cc_url = $autoscale_url + "?instance=" + $instanceID
    $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $autoscale_user,$autoscale_pw)))
    $response = Invoke-RestMethod -Uri $cc_url -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)} -Method 'Get'
}

function stopDeallocateInstance($instanceID) {
    $cc_url = $stop_url + "?wait_time=30"
    $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $autoscale_user,$autoscale_pw)))
    $headers = @{
        'Authorization'=("Basic {0}" -f $base64AuthInfo)
        'Content-Type'="application/json"
    }
    $post_body = @{
        'filter'='InstanceId=="' + $instanceID + '"'
    }
    $json_body = $post_body | ConvertTo-Json
    $response = Invoke-RestMethod -Uri $cc_url -Headers $headers -Method 'Post' -Body $json_body
}

function restartInstance($cc_node_name) {
    $cc_url = $start_url + "?wait_time=30"
    $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $autoscale_user,$autoscale_pw)))
    $headers = @{
        'Authorization'=("Basic {0}" -f $base64AuthInfo)
        'Content-Type'="application/json"
    }
    $post_body = @{
        'names'= @( $cc_node_name )
    }
    $json_body = $post_body | ConvertTo-Json
    $response = Invoke-RestMethod -Uri $cc_url -Headers $headers -Method 'Post' -Body $json_body
}

function activeCoreCount() {
    $count = 0
    $(listActiveInstances "CoreCount") -split "`n" |   ForEach-Object { $count += [int] $_ } 
    return $count
}

function autorestartDeallocated($demand) {    # Demand param is total target core count
    # Demand param is total target core count
    $active_cores = activeCoreCount
    $demand = $demand - $active_cores
    if ($demand -le 0) {
        return
    }

    $instances = listDeallocatedInstances @("InstanceID", "Name", "CoreCount")

    foreach ($inst in $instances) {
        if (-not $inst) {
            Write-Host("WARNING: list deallocated returned NULL instance")
            continue
        }

        $attrs = $inst.Split(',')
        $instance_id = $attrs[0] -replace '\s', ''
        $node_name = $attrs[1] -replace '\s', ''
        $core_count = $attrs[2] -replace '\s', ''

        if ([string]::IsNullOrWhiteSpace($instance_id) -or [string]::IsNullOrWhiteSpace($node_name)) {
            Write-Host("WARNING: list deallocated returned invalid instance: $inst")
            continue
        }
        Write-Verbose("Auto-Restarting instance $instance_id")
        restartInstance($node_name)
        $demand -= $core_count
        if ($demand -le 0) {
            return
        }
    }
}

function autostart() {

    # TODO: get NodeGroup and convert to slot_type
    $demand=targetCoreCount
    echo "Autostarting $demand cores of type : execute"
    

    if ($demand -le 0) {
        # TODO: Currently if TargetCoreCount isnt undefined then TargetCount is ignored (so set a core count)
        $demand = $min_node_count
    }

     # First, auto-restart stopped instances up to demand
    autorestartDeallocated($demand)

    # Next, set TargetCount to autostart any additional capacity
    jetpack autoscale -n execute -c $demand

    # Ensure min node count even if no demand
    jetpack autoscale -n execute -i $min_node_count


    # # TODO: get NodeGroup and convert to slot_type
    # $demand=targetCoreCount
    # echo "Autostarting $demand cores of type : execute"
    

    # if ($demand -le 0) {
    #     # TODO: Currently if TargetCoreCount isnt undefined then TargetCount is ignored (so set a core count)
    #     $demand = $min_node_count
    # }

    #  # First, auto-restart stopped instances up to demand
    # autorestartDeallocated($demand)

    # # Next, set TargetCount to autostart any additional capacity
    # jetpack autoscale -n execute -c $demand

    # # Ensure min node count even if no demand
    # jetpack autoscale -n execute -i $min_node_count    
}

function dbPop($nodeName) {
    $removeId = Invoke-sqlcmd -ServerInstance $sql_serv -Database $sql_db `
    -Query "SELECT InstanceId FROM $sql_tbl WHERE NodeName = '$nodeName';"
    Write-Verbose "Removing node $nodeName from DB"
    $pop =  Invoke-sqlcmd -ServerInstance $sql_serv -Database $sql_db `
    -Query "DELETE FROM $sql_tbl WHERE NodeName = '$nodeName';"
    return $removeId.InstanceId
}

function showDB() {
    Invoke-Sqlcmd -ServerInstance $sql_serv -Database $sql_db -query "
    SELECT *
    FROM [NodeState];"
}

function showDBNode($nodename) {
    Invoke-Sqlcmd -ServerInstance $sql_serv -Database $sql_db -query "
    SELECT *
    FROM [NodeState]
    WHERE NodeName = '$nodename';"
}

function showMarked($nodename) {
    Invoke-Sqlcmd -ServerInstance $sql_serv -Database $sql_db -query "
    SELECT *
    FROM [NodeState]
    WHERE DesignatedToRemove = 'True';"
}


function cleanDB() {
    # Clear out nodes that are in DB but no longer online
    $nodes = Get-HpcNode | Where-Object {!($_.IsHeadNode)}
    $db_hpcnodes = Invoke-sqlcmd -ServerInstance $sql_serv -Database $sql_db `
                        -Query "SELECT NodeName FROM $sql_tbl"

    $departed_hosts = $db_hpcnodes.nodename | ?{$nodes.NetBiosName -notcontains $_}
    Write-Verbose "Departed nodes found $($departed_nodes)"

    foreach($departed_host in $departed_hosts){
        dbPop($departed_host)
    }

}


function submitSleepJob($time_s, $num_tasks=1) {
    $job = New-HpcJob -Name "sleep_job"
    for ($i=0; $i -lt $num_tasks; $i++) {
        Add-HpcTask -Job $job -CommandLine "ping localhost -n $time_s"
    }
    Submit-HpcJob -Job $job
}


function submitSoaEchoJob($time_s, $num_tasks=1, $insecure=$true) {
     pushd $env:CCP_HOME\bin
     if ($insecure) {
        .\EchoClient.exe -h <%= node['hostname'] %> -jobName soaEchoTest -time $time_s -n $num_tasks -insecure
     } else {
        .\EchoClient.exe -h <%= node['hostname'] %> -jobName soaEchoTest -time $time_s -n $num_tasks
     }
     popd
}

if ($initialize) {
    initializeDb
    return
}

Write-Host("Updating new nodes")
updateNewNodes
Write-Host("Cleaning DB")
cleanDB
Write-Host("Assigning node templates")
assignNodeTemplateToNewNodes
Write-Host("Checking for autostart")
autostart
Write-Host("Updating existing nodes")
updateNodes

if ($reap) {
    Write-Host("Berserker!!!")
    berserker
}
Write-Host("Autoscale complete!")
Get-Date -Format g

